#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫—É–∫–æ–≤ –∏–∑ Chrome –≤ Camoufox
"""

import json
import sqlite3
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from loguru import logger


def check_chrome_cookies(chrome_profile_path: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–∫–∏ –≤ Chrome –ø—Ä–æ—Ñ–∏–ª–µ"""
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Chrome –ø—Ä–æ—Ñ–∏–ª—å: {chrome_profile_path}")
    
    chrome_path = Path(chrome_profile_path)
    cookies_path = chrome_path / "Network" / "Cookies"
    
    if not cookies_path.exists():
        cookies_path = chrome_path / "Cookies"
    
    if not cookies_path.exists():
        logger.error(f"‚ùå –§–∞–π–ª –∫—É–∫–æ–≤ Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω: {cookies_path}")
        return 0
    
    try:
        # –ß–∏—Ç–∞–µ–º –∫—É–∫–∏ –∏–∑ Chrome SQLite
        conn = sqlite3.connect(cookies_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫–æ–≤
        cursor.execute("SELECT COUNT(*) FROM cookies")
        count = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫—É–∫–æ–≤
        cursor.execute("SELECT name, host_key, path, expires_utc FROM cookies LIMIT 5")
        examples = cursor.fetchall()
        
        conn.close()
        
        logger.success(f"‚úÖ Chrome –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –∫—É–∫–æ–≤")
        logger.info("–ü—Ä–∏–º–µ—Ä—ã –∫—É–∫–æ–≤:")
        for name, host, path, expires in examples:
            logger.info(f"  - {name} @ {host}{path} (expires: {expires})")
        
        return count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Chrome –∫—É–∫–æ–≤: {e}")
        return 0


def check_camoufox_cookies(camoufox_profile_path: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–∫–∏ –≤ Camoufox –ø—Ä–æ—Ñ–∏–ª–µ"""
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Camoufox –ø—Ä–æ—Ñ–∏–ª—å: {camoufox_profile_path}")
    
    camoufox_path = Path(camoufox_profile_path)
    cookies_path = camoufox_path / "cookies.sqlite"
    
    if not cookies_path.exists():
        logger.error(f"‚ùå –§–∞–π–ª –∫—É–∫–æ–≤ Camoufox –Ω–µ –Ω–∞–π–¥–µ–Ω: {cookies_path}")
        return 0
    
    try:
        # –ß–∏—Ç–∞–µ–º –∫—É–∫–∏ –∏–∑ Camoufox SQLite
        conn = sqlite3.connect(cookies_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫–æ–≤
        cursor.execute("SELECT COUNT(*) FROM moz_cookies")
        count = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫—É–∫–æ–≤
        cursor.execute("SELECT name, host, path, expiry FROM moz_cookies LIMIT 5")
        examples = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(moz_cookies)")
        columns = cursor.fetchall()
        
        conn.close()
        
        logger.success(f"‚úÖ Camoufox –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç {count} –∫—É–∫–æ–≤")
        logger.info("–ü—Ä–∏–º–µ—Ä—ã –∫—É–∫–æ–≤:")
        for name, host, path, expiry in examples:
            logger.info(f"  - {name} @ {host}{path} (expires: {expiry})")
        
        logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã moz_cookies: {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")
        for col in columns:
            logger.info(f"  - {col[1]} ({col[2]})")
        
        return count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Camoufox –∫—É–∫–æ–≤: {e}")
        return 0


def check_exported_json(json_file_path: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON —Ñ–∞–π–ª –∫—É–∫–æ–≤"""
    json_path = Path(json_file_path)
    
    if not json_path.exists():
        logger.warning(f"‚ö†Ô∏è JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
        return 0
    
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            cookies = json.load(f)
        
        logger.success(f"‚úÖ JSON —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç {len(cookies)} –∫—É–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
        for i, cookie in enumerate(cookies[:3]):
            logger.info(f"  –ö—É–∫–∞ {i+1}: {cookie.get('name', 'unknown')} @ {cookie.get('host_key', 'unknown')}")
            
        return len(cookies)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
        return 0


def test_cookie_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –∫—É–∫–∏ –∏–∑ Chrome –≤ Firefox —Ñ–æ—Ä–º–∞—Ç"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∫—É–∫–æ–≤...")
    
    # –ü—Ä–∏–º–µ—Ä Chrome –∫—É–∫–∏
    chrome_cookie = {
        "name": "test_cookie",
        "value": "test_value",
        "host_key": ".example.com",
        "path": "/",
        "expires_utc": "1734542400000000",  # Chrome timestamp
        "is_secure": 1,
        "is_httponly": 1,
        "samesite": 1
    }
    
    logger.info(f"Chrome –∫—É–∫–∞: {chrome_cookie}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ chrome_importer
    try:
        from core.chrome_importer import ChromeProfileImporter
        importer = ChromeProfileImporter()
        firefox_cookie = importer._convert_chrome_cookie_to_firefox(chrome_cookie)
        
        logger.success(f"‚úÖ Firefox –∫—É–∫–∞: {firefox_cookie}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    logger.info("ü¶ä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫—É–∫–æ–≤ Chrome ‚Üí Camoufox")
    logger.info("=" * 60)
    
    # –ü—É—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    chrome_profile = "/Volumes/Disk2/apol/Library/Application Support/Google/Chrome/Default"
    camoufox_profile = "data/profiles/profile_6eqs93w4"
    json_files = list(Path(".").glob("chrome_cookies_*.json"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Chrome –ø—Ä–æ—Ñ–∏–ª—å
    chrome_count = check_chrome_cookies(chrome_profile)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Camoufox –ø—Ä–æ—Ñ–∏–ª—å  
    camoufox_count = check_camoufox_cookies(camoufox_profile)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Ñ–∞–π–ª—ã
    json_count = 0
    if json_files:
        latest_json = sorted(json_files)[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        logger.info(f"üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Ñ–∞–π–ª: {latest_json}")
        json_count = check_exported_json(str(latest_json))
    
    # –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    conversion_ok = test_cookie_conversion()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("\n" + "=" * 60)
    logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    logger.info(f"Chrome –ø—Ä–æ—Ñ–∏–ª—å:     {chrome_count} –∫—É–∫–æ–≤")
    logger.info(f"JSON —ç–∫—Å–ø–æ—Ä—Ç:       {json_count} –∫—É–∫–æ–≤")
    logger.info(f"Camoufox –ø—Ä–æ—Ñ–∏–ª—å:   {camoufox_count} –∫—É–∫–æ–≤")
    logger.info(f"–ö–æ–Ω–≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if conversion_ok else '‚ùå'}")
    
    # –ê–Ω–∞–ª–∏–∑
    if chrome_count > 0:
        export_efficiency = (json_count / chrome_count) * 100 if chrome_count > 0 else 0
        import_efficiency = (camoufox_count / json_count) * 100 if json_count > 0 else 0
        total_efficiency = (camoufox_count / chrome_count) * 100 if chrome_count > 0 else 0
        
        logger.info(f"\nüìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ü–ï–†–ï–ù–û–°–ê:")
        logger.info(f"Chrome ‚Üí JSON:      {export_efficiency:.1f}%")
        logger.info(f"JSON ‚Üí Camoufox:    {import_efficiency:.1f}%")
        logger.info(f"Chrome ‚Üí Camoufox:  {total_efficiency:.1f}%")
        
        if total_efficiency < 50:
            logger.warning("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–∞!")
            logger.info("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.info("- –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É–∫–∏ Chrome")
            logger.info("- –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞") 
            logger.info("- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É–∫–æ–≤")


if __name__ == "__main__":
    main() 