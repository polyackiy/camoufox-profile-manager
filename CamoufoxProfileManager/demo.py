#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π CamoufoxProfileManager
"""

import asyncio
import time
from pathlib import Path
from camoufox.async_api import AsyncCamoufox

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
class StorageManager:
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è StorageManager"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.profiles = {}
        self.usage_stats = []
    
    async def save_profile(self, profile):
        self.profiles[profile.id] = profile
        print(f"üíæ –ü—Ä–æ—Ñ–∏–ª—å {profile.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    
    async def get_profile(self, profile_id: str):
        return self.profiles.get(profile_id)
    
    async def update_profile(self, profile):
        if profile.id in self.profiles:
            self.profiles[profile.id] = profile
            print(f"üîÑ –ü—Ä–æ—Ñ–∏–ª—å {profile.name} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
    
    async def delete_profile(self, profile_id: str) -> bool:
        if profile_id in self.profiles:
            del self.profiles[profile_id]
            print(f"üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å {profile_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î")
            return True
        return False
    
    async def list_profiles(self, filters=None, limit=None, offset=0):
        return list(self.profiles.values())
    
    async def log_usage(self, usage_stats):
        self.usage_stats.append(usage_stats)
        print(f"üìä –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ: {usage_stats.action}")
    
    async def get_profile_usage_stats(self, profile_id: str):
        return [stats for stats in self.usage_stats if stats.profile_id == profile_id]


class FingerprintGenerator:
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è FingerprintGenerator"""
    
    async def generate_fingerprint(self, constraints=None):
        from core.models import BrowserSettings
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        import random
        
        operating_systems = ["windows", "macos", "linux"]
        screen_resolutions = ["1920x1080", "1366x768", "1440x900", "1600x900", "1280x1024"]
        languages_sets = [
            ["en-US", "en"],
            ["ru-RU", "ru", "en-US"], 
            ["es-ES", "es", "en"],
            ["de-DE", "de", "en"],
            ["fr-FR", "fr", "en"]
        ]
        
        return BrowserSettings(
            os=random.choice(operating_systems),
            screen=random.choice(screen_resolutions),
            languages=random.choice(languages_sets),
            hardware_concurrency=random.choice([2, 4, 6, 8, 12, 16]),
            device_memory=random.choice([2, 4, 8, 16, 32])
        )


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from core.models import Profile, ProxyConfig, ProxyType
from core.profile_manager import ProfileManager


async def demo_basic_operations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    print("üéØ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è CamoufoxProfileManager ===\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    storage = StorageManager("demo.db")
    manager = ProfileManager(storage, "demo_data") 
    
    print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á
    profiles = []
    
    # –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    social_profile = await manager.create_profile(
        name="–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
        group="social_media",
        browser_settings={
            "os": "windows",
            "screen": "1920x1080",
            "languages": ["en-US", "en"]
        }
    )
    profiles.append(social_profile)
    
    # –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –µ-–∫–æ–º–º–µ—Ä—Å–∞
    ecommerce_profile = await manager.create_profile(
        name="–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã",
        group="ecommerce", 
        browser_settings={
            "os": "macos",
            "screen": "1440x900",
            "languages": ["ru-RU", "ru", "en-US"]
        },
        proxy_config={
            "type": "http",
            "server": "proxy.example.com:8080",
            "username": "user",
            "password": "pass"
        }
    )
    profiles.append(ecommerce_profile)
    
    # –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    research_profile = await manager.create_profile(
        name="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥",
        group="research",
        browser_settings={
            "os": "linux",
            "screen": "1366x768",
            "languages": ["de-DE", "de", "en"]
        }
    )
    profiles.append(research_profile)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π\n")
    
    print("2Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π:")
    all_profiles = await manager.list_profiles()
    for profile in all_profiles:
        print(f"   üìù {profile.name} ({profile.group}) - {profile.browser_settings.os}")
    print()
    
    print("3Ô∏è‚É£ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...")
    cloned_profile = await manager.clone_profile(
        social_profile.id,
        "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ (–∫–æ–ø–∏—è)",
        regenerate_fingerprint=True
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è: {cloned_profile.name}\n")
    
    print("4Ô∏è‚É£ –†–æ—Ç–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–∞...")
    await manager.rotate_profile_fingerprint(research_profile.id)
    print("‚úÖ –û—Ç–ø–µ—á–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω\n")
    
    print("5Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—è...")
    export_data = await manager.export_profile(ecommerce_profile.id) 
    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω ({len(export_data)} –±–∞–π—Ç)\n")
    
    print("6Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π:")
    for profile in all_profiles:
        stats = await manager.get_profile_stats(profile.id)
        print(f"   üìä {stats['name']}: —Å–æ–∑–¥–∞–Ω {stats['created_at'].strftime('%Y-%m-%d %H:%M')}")
    print()
    
    return profiles[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –¥–µ–º–æ –±—Ä–∞—É–∑–µ—Ä–∞


async def demo_browser_launch(profile: Profile):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º"""
    print("7Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º...")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç Camoufox
        camoufox_options = profile.to_camoufox_launch_options()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º geoip –¥–ª—è –¥–µ–º–æ
        camoufox_options["geoip"] = False
        camoufox_options["headless"] = False
        camoufox_options["humanize"] = True
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
        print(f"   OS: {camoufox_options['os']}")
        print(f"   Locale: {camoufox_options['locale']}")
        print(f"   Profile dir: {camoufox_options['user_data_dir']}")
        
        async with AsyncCamoufox(**camoufox_options) as browser:
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            page = await browser.new_page()
            print("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç
            await page.goto("https://httpbin.org/headers")
            print("üåê –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ httpbin.org/headers")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ
            user_agent = await page.evaluate("navigator.userAgent")
            platform = await page.evaluate("navigator.platform") 
            languages = await page.evaluate("navigator.languages")
            screen_info = await page.evaluate("""
                () => ({
                    width: screen.width,
                    height: screen.height,
                    colorDepth: screen.colorDepth
                })
            """)
            
            print(f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ:")
            print(f"   User-Agent: {user_agent[:60]}...")
            print(f"   Platform: {platform}")
            print(f"   Languages: {languages}")
            print(f"   Screen: {screen_info['width']}x{screen_info['height']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies
            await page.evaluate("document.cookie = 'test_profile=demo_session; path=/'")
            cookies = await page.context.cookies()
            print(f"üç™ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ cookies: {len(cookies)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage
            await page.evaluate("""
                localStorage.setItem('profile_demo', JSON.stringify({
                    profileId: '%s',
                    sessionStart: new Date().toISOString(),
                    testData: '–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è'
                }));
            """ % profile.id)
            
            print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage")
            print("‚è≥ –ë—Ä–∞—É–∑–µ—Ä –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
            await asyncio.sleep(10)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º async sleep
            
        print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç, –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()


async def demo_advanced_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("8Ô∏è‚É£ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n")
    
    storage = StorageManager("demo.db")
    manager = ProfileManager(storage, "demo_data")
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("   üì¶ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    profile_names = [
        "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å 1",
        "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å 2", 
        "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å 3"
    ]
    
    created_profiles = []
    for name in profile_names:
        profile = await manager.create_profile(name, group="test_batch")
        created_profiles.append(profile)
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    # –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    profile_ids = [p.id for p in created_profiles]
    await manager.bulk_update_profiles(profile_ids, {"status": "inactive"})
    print("   ‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
    for profile in created_profiles:
        await manager.delete_profile(profile.id)
    print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        demo_profile = await demo_basic_operations()
        
        # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        await demo_browser_launch(demo_profile)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        await demo_advanced_features()
        
        print("üéâ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ===")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
        print("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ä–æ—Ç–∞—Ü–∏—è –æ—Ç–ø–µ—á–∞—Ç–∫–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞")
        print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
        print("   ‚úÖ –ó–∞–ø—É—Å–∫ Camoufox —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        print("   ‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å cookies –∏ localStorage")
        print("   ‚úÖ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π")
        print("   ‚úÖ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:")
        print("   üîß –†–µ–∞–ª–∏–∑–∞—Ü–∏—è StorageManager —Å SQLite")
        print("   üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("   üåê REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("   üîí –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("   üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        print(f"\nüìÅ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {Path('demo_data/profiles').absolute()}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 