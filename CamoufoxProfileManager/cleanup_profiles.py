#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
"""

import os
import shutil
import asyncio
from pathlib import Path
from typing import List, Dict, Set
from loguru import logger

from core.database import StorageManager
from core.models import Profile


class ProfileCleanupManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    
    def __init__(self, data_dir: str = "data"):
        self.data_dir = Path(data_dir)
        self.profiles_dir = self.data_dir / "profiles"
        self.storage = StorageManager(str(self.data_dir / "profiles.db"))
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        await self.storage.initialize()
        logger.info("üîß ProfileCleanupManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_profile_directories_on_disk(self) -> List[Path]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ –¥–∏—Å–∫–µ"""
        if not self.profiles_dir.exists():
            return []
        
        profile_dirs = []
        for item in self.profiles_dir.iterdir():
            if item.is_dir() and item.name.startswith("profile_"):
                profile_dirs.append(item)
        
        return profile_dirs
    
    async def get_profiles_in_database(self) -> List[Profile]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return await self.storage.list_profiles()
    
    def extract_profile_id_from_path(self, profile_path: Path) -> str:
        """–ò–∑–≤–ª–µ—á—å ID –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –ø—É—Ç–∏"""
        # profile_xyz123 -> xyz123
        return profile_path.name.replace("profile_", "")
    
    async def find_orphaned_profile_directories(self) -> List[Dict[str, any]]:
        """–ù–∞–π—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –ü–æ–∏—Å–∫ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        disk_dirs = self.get_profile_directories_on_disk()
        db_profiles = await self.get_profiles_in_database()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –ë–î
        db_profile_ids = {profile.id for profile in db_profiles}
        
        # –ù–∞—Ö–æ–¥–∏–º –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        orphaned = []
        for profile_dir in disk_dirs:
            profile_id = self.extract_profile_id_from_path(profile_dir)
            
            if profile_id not in db_profile_ids:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                size = self.get_directory_size(profile_dir)
                modified = profile_dir.stat().st_mtime
                
                orphaned.append({
                    'path': profile_dir,
                    'profile_id': profile_id,
                    'size_mb': size / (1024 * 1024),
                    'modified': modified,
                    'files_count': len(list(profile_dir.rglob('*')))
                })
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(orphaned)} –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        return orphaned
    
    async def find_missing_profile_directories(self) -> List[Dict[str, any]]:
        """–ù–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ –ë–î, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ –¥–∏—Å–∫–µ"""
        logger.info("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        
        disk_dirs = self.get_profile_directories_on_disk()
        db_profiles = await self.get_profiles_in_database()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ –¥–∏—Å–∫–µ
        disk_profile_ids = {self.extract_profile_id_from_path(d) for d in disk_dirs}
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª–∏ –±–µ–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        missing = []
        for profile in db_profiles:
            if profile.id not in disk_profile_ids:
                missing.append({
                    'profile': profile,
                    'expected_path': self.profiles_dir / f"profile_{profile.id}"
                })
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(missing)} –ø—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        return missing
    
    def get_directory_size(self, path: Path) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –±–∞–π—Ç–∞—Ö"""
        total_size = 0
        try:
            for file_path in path.rglob('*'):
                if file_path.is_file():
                    total_size += file_path.stat().st_size
        except (OSError, PermissionError):
            pass
        return total_size
    
    async def cleanup_orphaned_directories(self, orphaned: List[Dict], confirm: bool = True) -> int:
        """–û—á–∏—Å—Ç–∏—Ç—å –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if not orphaned:
            logger.info("‚úÖ –ù–µ—Ç –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            return 0
        
        logger.warning(f"üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(orphaned)} –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
        
        total_size = 0
        for item in orphaned:
            logger.warning(f"  - {item['path'].name}: {item['size_mb']:.1f} MB, {item['files_count']} —Ñ–∞–π–ª–æ–≤")
            total_size += item['size_mb']
        
        logger.warning(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.1f} MB")
        
        if confirm:
            response = input(f"\n‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å {len(orphaned)} –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π? (yes/no): ").lower()
            if response not in ['yes', 'y', '–¥–∞']:
                logger.info("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return 0
        
        # –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        deleted_count = 0
        for item in orphaned:
            try:
                shutil.rmtree(item['path'])
                logger.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞: {item['path'].name}")
                deleted_count += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item['path'].name}: {e}")
        
        logger.success(f"üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {deleted_count} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        return deleted_count
    
    async def create_missing_directories(self, missing: List[Dict]) -> int:
        """–°–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        if not missing:
            logger.info("‚úÖ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–º–µ—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            return 0
        
        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ {len(missing)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
        
        created_count = 0
        for item in missing:
            try:
                item['expected_path'].mkdir(parents=True, exist_ok=True)
                logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞: {item['expected_path'].name}")
                created_count += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {item['expected_path'].name}: {e}")
        
        logger.success(f"üéâ –°–æ–∑–¥–∞–Ω–æ {created_count} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        return created_count
    
    async def full_diagnostic(self) -> Dict[str, any]:
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π...")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        disk_dirs = self.get_profile_directories_on_disk()
        db_profiles = await self.get_profiles_in_database()
        
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º
        orphaned = await self.find_orphaned_profile_directories()
        missing = await self.find_missing_profile_directories()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤
        total_disk_size = sum(self.get_directory_size(d) for d in disk_dirs) / (1024 * 1024)
        orphaned_size = sum(item['size_mb'] for item in orphaned)
        
        diagnostic_result = {
            'total_profiles_in_db': len(db_profiles),
            'total_directories_on_disk': len(disk_dirs),
            'total_disk_size_mb': total_disk_size,
            'orphaned_directories': len(orphaned),
            'orphaned_size_mb': orphaned_size,
            'missing_directories': len(missing),
            'healthy_profiles': len(db_profiles) - len(missing),
            'issues_found': len(orphaned) + len(missing)
        }
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
        logger.info(f"  –ü—Ä–æ—Ñ–∏–ª–µ–π –≤ –ë–î: {diagnostic_result['total_profiles_in_db']}")
        logger.info(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –Ω–∞ –¥–∏—Å–∫–µ: {diagnostic_result['total_directories_on_disk']}")
        logger.info(f"  –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {diagnostic_result['total_disk_size_mb']:.1f} MB")
        logger.info(f"  –û—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {diagnostic_result['orphaned_directories']} ({diagnostic_result['orphaned_size_mb']:.1f} MB)")
        logger.info(f"  –ü—Ä–æ—Ñ–∏–ª–µ–π –±–µ–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {diagnostic_result['missing_directories']}")
        logger.info(f"  –ó–¥–æ—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {diagnostic_result['healthy_profiles']}")
        
        if diagnostic_result['issues_found'] == 0:
            logger.success("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {diagnostic_result['issues_found']} –ø—Ä–æ–±–ª–µ–º")
        
        return diagnostic_result
    
    async def auto_cleanup(self, dry_run: bool = False) -> Dict[str, int]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª–µ–Ω–∏–µ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö, —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö)"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏...")
        
        if dry_run:
            logger.info("üîç –†–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (dry-run)")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º—ã
        orphaned = await self.find_orphaned_profile_directories()
        missing = await self.find_missing_profile_directories()
        
        results = {
            'orphaned_removed': 0,
            'directories_created': 0
        }
        
        # –£–¥–∞–ª—è–µ–º –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if orphaned and not dry_run:
            results['orphaned_removed'] = await self.cleanup_orphaned_directories(orphaned, confirm=False)
        elif orphaned:
            logger.info(f"üîç Dry-run: –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(orphaned)} –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if missing and not dry_run:
            results['directories_created'] = await self.create_missing_directories(missing)
        elif missing:
            logger.info(f"üîç Dry-run: –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ {len(missing)} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
        
        return results
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        await self.storage.close()


async def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–£—Ç–∏–ª–∏—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π Camoufox')
    parser.add_argument('--action', choices=['diagnostic', 'cleanup', 'auto'], 
                       default='diagnostic', help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--dry-run', action='store_true', 
                       help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')
    parser.add_argument('--data-dir', default='data', 
                       help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    cleanup_manager = ProfileCleanupManager(args.data_dir)
    await cleanup_manager.initialize()
    
    try:
        if args.action == 'diagnostic':
            await cleanup_manager.full_diagnostic()
            
        elif args.action == 'cleanup':
            orphaned = await cleanup_manager.find_orphaned_profile_directories()
            if orphaned:
                await cleanup_manager.cleanup_orphaned_directories(orphaned)
            else:
                logger.info("‚úÖ –ù–µ—Ç –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
                
        elif args.action == 'auto':
            results = await cleanup_manager.auto_cleanup(dry_run=args.dry_run)
            logger.info(f"üéâ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {results['orphaned_removed']}, —Å–æ–∑–¥–∞–Ω–æ {results['directories_created']}")
    
    finally:
        await cleanup_manager.close()


if __name__ == "__main__":
    asyncio.run(main()) 