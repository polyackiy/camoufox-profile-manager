#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ demo_data –≤ data
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from core.database import StorageManager
from core.profile_manager import ProfileManager
from loguru import logger


async def migrate_data():
    """–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ demo_data –≤ data"""
    
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ demo_data –≤ data")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ (demo_data)
    source_storage = StorageManager("demo_data/profiles.db")
    await source_storage.initialize()
    source_manager = ProfileManager(source_storage, "demo_data")
    await source_manager.initialize()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–µ –º–µ—Å—Ç–æ (data)
    target_storage = StorageManager("data/profiles.db")
    await target_storage.initialize()
    target_manager = ProfileManager(target_storage, "data")
    await target_manager.initialize()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ demo_data
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–∑ demo_data...")
        source_profiles = await source_manager.list_profiles()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(source_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ demo_data
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ demo_data...")
        source_groups = await source_storage.list_profile_groups()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(source_groups)} –≥—Ä—É–ø–ø")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≥—Ä—É–ø–ø—ã
        logger.info("üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≥—Ä—É–ø–ø—ã...")
        for group in source_groups:
            await target_storage.save_profile_group(group)
            logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞: {group.name}")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ—Ñ–∏–ª–∏
        logger.info("üîÑ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø—Ä–æ—Ñ–∏–ª–∏...")
        for profile in source_profiles:
            await target_storage.save_profile(profile)
            logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω: {profile.name} ({profile.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        target_profiles = await target_manager.list_profiles()
        target_groups = await target_storage.list_profile_groups()
        
        logger.success(f"üéâ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
        logger.info(f"   –ü—Ä–æ—Ñ–∏–ª–µ–π: {len(target_profiles)}")
        logger.info(f"   –ì—Ä—É–ø–ø: {len(target_groups)}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
    
    finally:
        await source_storage.close()
        await target_storage.close()


if __name__ == "__main__":
    asyncio.run(migrate_data()) 