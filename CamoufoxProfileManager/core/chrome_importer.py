"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫—É–∫–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π Google Chrome
"""

import os
import sqlite3
import json
import shutil
import platform
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime, timezone, timedelta
from loguru import logger
import tempfile

from .models import Profile, BrowserSettings
from .chrome_cookie_decryptor import ChromeCookieDecryptor


class ChromeProfileImporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.chrome_data_paths = self._get_chrome_data_paths()
        
    def _get_chrome_data_paths(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º Chrome –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°"""
        home = Path.home()
        
        if self.system == "windows":
            return {
                "default": str(home / "AppData/Local/Google/Chrome/User Data"),
                "profiles": str(home / "AppData/Local/Google/Chrome/User Data")
            }
        elif self.system == "darwin":  # macOS
            return {
                "default": str(home / "Library/Application Support/Google/Chrome"),
                "profiles": str(home / "Library/Application Support/Google/Chrome")
            }
        elif self.system == "linux":
            return {
                "default": str(home / ".config/google-chrome"),
                "profiles": str(home / ".config/google-chrome")
            }
        else:
            return {
                "default": "",
                "profiles": ""
            }
    
    def find_chrome_profiles(self, chrome_data_path: Optional[str] = None) -> List[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ Chrome"""
        if chrome_data_path:
            base_path = Path(chrome_data_path)
        else:
            base_path = Path(self.chrome_data_paths["profiles"])
        
        if not base_path.exists():
            logger.warning(f"–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω: {base_path}")
            return []
        
        profiles = []
        
        # –ò—â–µ–º Default –ø—Ä–æ—Ñ–∏–ª—å
        default_path = base_path / "Default"
        if default_path.exists():
            profile_info = self._get_profile_info(default_path, "Default")
            if profile_info:
                profiles.append(profile_info)
        
        # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ Profile 1, Profile 2, etc.
        for item in base_path.iterdir():
            if item.is_dir() and item.name.startswith("Profile "):
                profile_info = self._get_profile_info(item, item.name)
                if profile_info:
                    profiles.append(profile_info)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome")
        return profiles
    
    def _get_profile_info(self, profile_path: Path, profile_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ Chrome"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ Cookies
            cookies_path = profile_path / "Network" / "Cookies"
            if not cookies_path.exists():
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä—è–º–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ
                cookies_path = profile_path / "Cookies"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –∏–∑ —Ñ–∞–π–ª–∞ Preferences
            prefs_path = profile_path / "Preferences"
            profile_info = {
                "name": profile_name,
                "path": str(profile_path),
                "cookies_path": str(cookies_path) if cookies_path.exists() else None,
                "preferences_path": str(prefs_path) if prefs_path.exists() else None,
                "has_cookies": cookies_path.exists(),
                "display_name": profile_name
            }
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏–∑ Preferences
            if prefs_path.exists():
                try:
                    with open(prefs_path, 'r', encoding='utf-8') as f:
                        prefs = json.load(f)
                        if 'profile' in prefs and 'name' in prefs['profile']:
                            profile_info["display_name"] = prefs['profile']['name']
                        elif 'account_info' in prefs and len(prefs['account_info']) > 0:
                            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Google
                            for account in prefs['account_info']:
                                if 'full_name' in account:
                                    profile_info["display_name"] = account['full_name']
                                    break
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å preferences: {e}")
            
            return profile_info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ {profile_name}: {e}")
            return None
    
    def export_chrome_cookies(self, chrome_profile_path: str, output_path: Optional[str] = None) -> Optional[str]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Chrome –≤ JSON —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∫—É–∫–æ–≤ –∏–∑ Chrome –ø—Ä–æ—Ñ–∏–ª—è: {chrome_profile_path}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –¥–µ–∫—Ä–∏–ø—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É–∫–æ–≤
            decryptor = ChromeCookieDecryptor()
            cookies_data = decryptor.get_decrypted_chrome_cookies(chrome_profile_path)
            
            if not cookies_data:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ –∏–∑ Chrome –ø—Ä–æ—Ñ–∏–ª—è")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫—É–∫–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è JSON
            cookies = []
            for cookie_data in cookies_data:
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ Chrome –≤ –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    cookie = dict(cookie_data)
                    
                    if 'expires_utc' in cookie and cookie['expires_utc']:
                        try:
                            # Chrome —Ö—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö —Å 1601 –≥–æ–¥–∞
                            chrome_epoch = datetime(1601, 1, 1, tzinfo=timezone.utc)
                            if isinstance(cookie['expires_utc'], (int, float)):
                                cookie_time = chrome_epoch + timedelta(microseconds=cookie['expires_utc'])
                                cookie['expires_utc'] = cookie_time.isoformat()
                        except Exception as e:
                            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤—Ä–µ–º–µ–Ω–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
                            logger.debug(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫—É–∫–∏ {cookie.get('name')}: {e}")
                            cookie['expires_utc'] = (datetime.now() + timedelta(days=365)).isoformat()
                    
                    cookies.append(cookie)
                    
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É–∫–∏ {cookie_data.get('name', 'unknown')}: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –≤ JSON
            if not output_path:
                output_path = f"chrome_cookies_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            try:
                with open(output_path, 'w', encoding='utf-8') as f:
                    json.dump(cookies, f, indent=2, ensure_ascii=False)
                    
                logger.success(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(cookies)} –∫—É–∫–æ–≤ –≤ {output_path}")
                return output_path
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞: {e}")
                return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—É–∫–æ–≤: {e}")
            return None
    
    def import_cookies_to_camoufox(self, cookies_json_path: str, camoufox_profile_path: str) -> bool:
        """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É–∫–∏ –∏–∑ JSON –≤ –ø—Ä–æ—Ñ–∏–ª—å Camoufox"""
        try:
            # –ß–∏—Ç–∞–µ–º –∫—É–∫–∏ –∏–∑ JSON
            with open(cookies_json_path, 'r', encoding='utf-8') as f:
                cookies = json.load(f)
            
            # –ü—É—Ç—å –∫ –±–∞–∑–µ –∫—É–∫–æ–≤ Firefox/Camoufox
            firefox_cookies_path = Path(camoufox_profile_path) / "cookies.sqlite"
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –∫—É–∫–æ–≤ Firefox –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not firefox_cookies_path.exists():
                self._create_firefox_cookies_db(firefox_cookies_path)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ Firefox
            conn = sqlite3.connect(firefox_cookies_path)
            cursor = conn.cursor()
            
            imported_count = 0
            for cookie in cookies:
                try:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫—É–∫—É Chrome –≤ —Ñ–æ—Ä–º–∞—Ç Firefox
                    firefox_cookie = self._convert_chrome_cookie_to_firefox(cookie)
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –∫—É–∫—É –≤ –±–∞–∑—É Firefox
                    cursor.execute("""
                        INSERT OR REPLACE INTO moz_cookies 
                        (originAttributes, name, value, host, path, expiry, lastAccessed, creationTime, 
                         isSecure, isHttpOnly, inBrowserElement, sameSite, rawSameSite, schemeMap, isPartitionedAttributeSet)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, firefox_cookie)
                    
                    imported_count += 1
                    
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫—É–∫–∏ {cookie.get('name', 'unknown')}: {e}")
                    continue
            
            conn.commit()
            conn.close()
            
            logger.info(f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –∫—É–∫–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª—å Camoufox")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫—É–∫–æ–≤ –≤ Camoufox: {e}")
            return False
    
    def _create_firefox_cookies_db(self, db_path: Path):
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –∫—É–∫–æ–≤ Firefox/Camoufox"""
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫—É–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Firefox —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS moz_cookies (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                originAttributes TEXT NOT NULL DEFAULT '',
                name TEXT,
                value TEXT,
                host TEXT,
                path TEXT,
                expiry INTEGER,
                lastAccessed INTEGER,
                creationTime INTEGER,
                isSecure INTEGER DEFAULT 0,
                isHttpOnly INTEGER DEFAULT 0,
                inBrowserElement INTEGER DEFAULT 0,
                sameSite INTEGER DEFAULT 0,
                rawSameSite INTEGER DEFAULT 0,
                schemeMap INTEGER DEFAULT 0,
                isPartitionedAttributeSet INTEGER DEFAULT 0
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º Firefox)
        cursor.execute("CREATE INDEX IF NOT EXISTS moz_cookies_originAttributes ON moz_cookies(originAttributes)")
        cursor.execute("CREATE INDEX IF NOT EXISTS moz_cookies_name ON moz_cookies(name)")
        cursor.execute("CREATE INDEX IF NOT EXISTS moz_cookies_host ON moz_cookies(host)")
        
        conn.commit()
        conn.close()
        
        logger.debug("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –∫—É–∫–æ–≤ Firefox/Camoufox —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é")
    
    def _convert_chrome_cookie_to_firefox(self, chrome_cookie: Dict[str, Any]) -> Tuple:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É–∫—É Chrome –≤ —Ñ–æ—Ä–º–∞—Ç Firefox/Camoufox —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        current_time = int(datetime.now().timestamp() * 1000000)  # Firefox –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        expiry = 0
        if chrome_cookie.get('expires_utc'):
            try:
                if isinstance(chrome_cookie['expires_utc'], str):
                    # –ï—Å–ª–∏ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ ISO —Ñ–æ—Ä–º–∞—Ç–∞
                    expiry_dt = datetime.fromisoformat(chrome_cookie['expires_utc'].replace('Z', '+00:00'))
                    expiry = int(expiry_dt.timestamp())
                elif isinstance(chrome_cookie['expires_utc'], (int, float)):
                    # Chrome timestamp –≤ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∞—Ö —Å 1601 –≥–æ–¥–∞
                    chrome_epoch = datetime(1601, 1, 1, tzinfo=timezone.utc)
                    expiry_dt = chrome_epoch + timedelta(microseconds=chrome_cookie['expires_utc'])
                    expiry = int(expiry_dt.timestamp())
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {e}")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≥–æ–¥
                expiry = int((datetime.now() + timedelta(days=365)).timestamp())
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        creation_time = current_time
        last_access_time = current_time
        
        if chrome_cookie.get('creation_utc'):
            try:
                if isinstance(chrome_cookie['creation_utc'], (int, float)):
                    chrome_epoch = datetime(1601, 1, 1, tzinfo=timezone.utc)
                    creation_dt = chrome_epoch + timedelta(microseconds=chrome_cookie['creation_utc'])
                    creation_time = int(creation_dt.timestamp() * 1000000)
            except:
                pass
        
        if chrome_cookie.get('last_access_utc'):
            try:
                if isinstance(chrome_cookie['last_access_utc'], (int, float)):
                    chrome_epoch = datetime(1601, 1, 1, tzinfo=timezone.utc)
                    access_dt = chrome_epoch + timedelta(microseconds=chrome_cookie['last_access_utc'])
                    last_access_time = int(access_dt.timestamp() * 1000000)
            except:
                pass
        
        # –ú–∞–ø–ø–∏–Ω–≥ SameSite –∑–Ω–∞—á–µ–Ω–∏–π
        samesite_map = {0: 0, 1: 1, 2: 2}  # Chrome: 0=None, 1=Lax, 2=Strict
        samesite = samesite_map.get(chrome_cookie.get('samesite', 0), 0)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ—Å—Ç–∞ (Firefox —Ç—Ä–µ–±—É–µ—Ç —Ç–æ—á–∫—É –¥–ª—è –¥–æ–º–µ–Ω–Ω—ã—Ö –∫—É–∫–æ–≤)
        host = chrome_cookie.get('host_key', '')
        if host and not host.startswith('.') and '.' in host:
            # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–º–µ–Ω–Ω–∞—è –∫—É–∫–∞ –±–µ–∑ —Ç–æ—á–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É
            if not any(host.startswith(prefix) for prefix in ['http://', 'https://', 'localhost']):
                host = '.' + host
        
        return (
            '',  # originAttributes (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫—É–∫–æ–≤)
            chrome_cookie.get('name', ''),
            chrome_cookie.get('value', ''),
            host,
            chrome_cookie.get('path', '/'),
            expiry,
            last_access_time,
            creation_time,
            1 if chrome_cookie.get('is_secure') else 0,
            1 if chrome_cookie.get('is_httponly') else 0,
            0,  # inBrowserElement
            samesite,
            samesite,  # rawSameSite
            0,  # schemeMap
            0   # isPartitionedAttributeSet
        )
    
    def migrate_chrome_profile_to_camoufox(self, 
                                         chrome_profile_path: str,
                                         camoufox_profile: Profile,
                                         include_cookies: bool = True,
                                         include_bookmarks: bool = True,
                                         include_history: bool = False) -> Dict[str, Any]:
        """–ü–æ–ª–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è Chrome –≤ Camoufox"""
        results = {
            "success": False,
            "cookies_imported": 0,
            "bookmarks_imported": 0,
            "history_imported": 0,
            "errors": []
        }
        
        try:
            chrome_path = Path(chrome_profile_path)
            camoufox_path = Path(camoufox_profile.get_storage_path())
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è Camoufox –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            camoufox_path.mkdir(parents=True, exist_ok=True)
            
            # –ò–º–ø–æ—Ä—Ç –∫—É–∫–æ–≤
            if include_cookies:
                try:
                    cookies_json = self.export_chrome_cookies(chrome_profile_path)
                    if cookies_json and self.import_cookies_to_camoufox(cookies_json, str(camoufox_path)):
                        results["cookies_imported"] = 1
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        os.unlink(cookies_json)
                except Exception as e:
                    results["errors"].append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫—É–∫–æ–≤: {e}")
            
            # –ò–º–ø–æ—Ä—Ç –∑–∞–∫–ª–∞–¥–æ–∫
            if include_bookmarks:
                try:
                    bookmarks_path = chrome_path / "Bookmarks"
                    if bookmarks_path.exists():
                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –∑–∞–∫–ª–∞–¥–æ–∫ (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç Firefox)
                        shutil.copy2(bookmarks_path, camoufox_path / "chrome_bookmarks.json")
                        results["bookmarks_imported"] = 1
                except Exception as e:
                    results["errors"].append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–∫–ª–∞–¥–æ–∫: {e}")
            
            # –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if include_history:
                try:
                    history_path = chrome_path / "History"
                    if history_path.exists():
                        # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ Chrome SQLite –≤ JSON
                        history_json = self._export_chrome_history(str(history_path))
                        if history_json:
                            with open(camoufox_path / "chrome_history.json", 'w') as f:
                                json.dump(history_json, f)
                            results["history_imported"] = len(history_json)
                except Exception as e:
                    results["errors"].append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            
            results["success"] = True
            logger.info(f"–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
            
        except Exception as e:
            results["errors"].append(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        
        return results
    
    def _export_chrome_history(self, history_db_path: str) -> Optional[List[Dict]]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ Chrome"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é
            with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as temp_file:
                temp_history_path = temp_file.name
            
            shutil.copy2(history_db_path, temp_history_path)
            
            conn = sqlite3.connect(temp_history_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT url, title, visit_count, last_visit_time
                FROM urls
                ORDER BY last_visit_time DESC
                LIMIT 1000
            """)
            
            history = []
            for row in cursor.fetchall():
                history.append({
                    "url": row[0],
                    "title": row[1],
                    "visit_count": row[2],
                    "last_visit_time": row[3]
                })
            
            conn.close()
            os.unlink(temp_history_path)
            
            return history
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return None


# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç pandas, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
try:
    import pandas as pd
except ImportError:
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è Timedelta
    class TimedeltaStub:
        def __init__(self, microseconds):
            self.microseconds = microseconds
        
        def __radd__(self, other):
            if isinstance(other, datetime):
                return other + pd.Timedelta(microseconds=self.microseconds)
            return NotImplemented
    
    class PandasStub:
        @staticmethod
        def Timedelta(microseconds):
            from datetime import timedelta
            return timedelta(microseconds=microseconds)
    
    pd = PandasStub() 