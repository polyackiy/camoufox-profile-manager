"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ Chrome
"""

import asyncio
import sys
from pathlib import Path
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))


async def test_chrome_detection():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome"""
    logger.info("üß™ –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome")
    
    try:
        from core.chrome_importer import ChromeProfileImporter
        
        importer = ChromeProfileImporter()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        logger.info(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {importer.system}")
        logger.info(f"–ü—É—Ç–∏ –ø–æ–∏—Å–∫–∞ Chrome: {importer.chrome_data_paths}")
        
        # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = importer.find_chrome_profiles()
        
        if profiles:
            logger.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome:")
            for i, profile in enumerate(profiles, 1):
                logger.info(f"  {i}. {profile['display_name']} ({profile['name']})")
                logger.info(f"     –ü—É—Ç—å: {profile['path']}")
                logger.info(f"     –ö—É–∫–∏: {'‚úì' if profile['has_cookies'] else '‚úó'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
                profile_path = Path(profile['path'])
                cookies_path = Path(profile['cookies_path']) if profile['cookies_path'] else None
                
                logger.info(f"     –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úì' if profile_path.exists() else '‚úó'}")
                if cookies_path:
                    logger.info(f"     –§–∞–π–ª –∫—É–∫–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úì' if cookies_path.exists() else '‚úó'}")
        else:
            logger.warning("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            logger.info("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.info("   - Chrome –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            logger.info("   - –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
            logger.info("   - –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        
        return len(profiles) > 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Chrome: {e}")
        return False


async def test_basic_migration():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏")
    
    try:
        from core.database import StorageManager
        from core.profile_manager import ProfileManager
        from core.chrome_migration_manager import ChromeMigrationManager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        storage = StorageManager()
        await storage.initialize()
        
        profile_manager = ProfileManager(storage)
        await profile_manager.initialize()
        
        migration_manager = ChromeMigrationManager(profile_manager)
        
        # –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
        chrome_profiles = await migration_manager.discover_chrome_profiles()
        
        if not chrome_profiles:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª–∏ Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏")
            return True
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(chrome_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞ –º–∞–ø–ø–∏–Ω–≥–∞
        template_path = await migration_manager.generate_mapping_template(
            output_path="test_chrome_mapping.yaml"
        )
        logger.success(f"‚úÖ –®–∞–±–ª–æ–Ω –º–∞–ø–ø–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω: {template_path}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        status = await migration_manager.get_migration_status()
        logger.info(f"–°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏:")
        logger.info(f"  Chrome –ø—Ä–æ—Ñ–∏–ª–µ–π: {status['chrome_profiles_found']}")
        logger.info(f"  Camoufox –ø—Ä–æ—Ñ–∏–ª–µ–π: {status['camoufox_profiles_total']}")
        logger.info(f"  –£–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {status['migrated_profiles']}")
        
        # –¢–µ—Å—Ç —Å—É—Ö–æ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞
        dry_run_result = await migration_manager.migrate_all_profiles(dry_run=True)
        logger.info(f"–°—É—Ö–æ–π –ø—Ä–æ–≥–æ–Ω: –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {dry_run_result['chrome_profiles_found']} –ø—Ä–æ—Ñ–∏–ª–µ–π")
        
        logger.success("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False


async def test_config_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from core.chrome_migration_manager import ChromeMigrationManager
        from core.profile_manager import ProfileManager
        from core.database import StorageManager
        
        storage = StorageManager()
        await storage.initialize()
        profile_manager = ProfileManager(storage)
        await profile_manager.initialize()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π)
        migration_manager = ChromeMigrationManager(
            profile_manager, 
            config_path="nonexistent_config.yaml"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        assert migration_manager.config is not None
        assert "default_migration_settings" in migration_manager.config
        
        logger.success("‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        test_config_path = "test_chrome_config.yaml"
        migration_manager.config_path = test_config_path
        migration_manager.save_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        config_file = Path(test_config_path)
        if config_file.exists():
            logger.success(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {test_config_path}")
            
            # –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            import yaml
            with open(test_config_path, 'r', encoding='utf-8') as f:
                saved_config = yaml.safe_load(f)
            
            assert saved_config is not None
            assert "default_migration_settings" in saved_config
            
            logger.success("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            config_file.unlink()
        else:
            logger.error("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_chrome_paths():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–µ–π Chrome"""
    logger.info("üß™ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–µ–π Chrome")
    
    try:
        from core.chrome_importer import ChromeProfileImporter
        
        importer = ChromeProfileImporter()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        assert importer.chrome_data_paths is not None
        assert "profiles" in importer.chrome_data_paths
        
        logger.info(f"–°–∏—Å—Ç–µ–º–∞: {importer.system}")
        logger.info(f"–ü—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—è–º: {importer.chrome_data_paths['profiles']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°
        profiles_path = importer.chrome_data_paths['profiles']
        assert profiles_path != ""
        
        if importer.system == "windows":
            assert "AppData" in profiles_path
        elif importer.system == "darwin":
            assert "Library" in profiles_path
        elif importer.system == "linux":
            assert ".config" in profiles_path
        
        logger.success("‚úÖ –ü—É—Ç–∏ Chrome –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—É—Ç–µ–π Chrome: {e}")
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏ Chrome")
    logger.info("=" * 50)
    
    tests = [
        ("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π Chrome", test_chrome_paths),
        ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome", test_chrome_detection),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_config_generation),
        ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏", test_basic_migration),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        logger.info(f"\nüîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {test_name}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    logger.info("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        if result:
            logger.success(f"‚úÖ {test_name}")
            passed += 1
        else:
            logger.error(f"‚ùå {test_name}")
    
    logger.info(f"\nüìà –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        logger.success("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üí° –°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ Chrome –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        logger.info("üìñ –ó–∞–ø—É—Å—Ç–∏—Ç–µ chrome_migration_wizard.py –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏")
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º")
    
    return passed == total


if __name__ == "__main__":
    asyncio.run(run_all_tests()) 