#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è CamoufoxProfileManager —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
"""

import asyncio
import time
from pathlib import Path
from camoufox.async_api import AsyncCamoufox

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.models import Profile, ProxyConfig, ProxyType, ProfileGroup
from core.profile_manager import ProfileManager
from core.database import StorageManager
from core.fingerprint_generator import FingerprintGenerator


async def demo_database_operations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üéØ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è CamoufoxProfileManager —Å SQLite ===\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    storage = StorageManager("demo_data/profiles.db")
    await storage.initialize()
    
    manager = ProfileManager(storage, "demo_data")
    await manager.initialize()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n")
    
    print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
    groups = [
        ProfileGroup(name="–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", description="–ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Ü—Å–µ—Ç—è–º–∏"),
        ProfileGroup(name="E-commerce", description="–ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤"),
        ProfileGroup(name="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", description="–ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"),
    ]
    
    for group in groups:
        await storage.save_profile_group(group)
        print(f"   üìÅ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group.name}")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(groups)} –≥—Ä—É–ø–ø\n")
    
    print("2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
    profiles_data = [
        {
            "name": "Facebook –ü—Ä–æ—Ñ–∏–ª—å 1",
            "group": groups[0].id,
            "os": "windows",
            "proxy": {
                "type": "http",
                "server": "proxy1.example.com:8080",
                "username": "user1",
                "password": "pass1"
            }
        },
        {
            "name": "Amazon –ü—Ä–æ—Ñ–∏–ª—å 1",
            "group": groups[1].id,
            "os": "macos",
            "proxy": {
                "type": "socks5",
                "server": "proxy2.example.com:1080",
                "username": "user2",
                "password": "pass2"
            }
        },
        {
            "name": "Research Bot 1",
            "group": groups[2].id,
            "os": "linux",
            "proxy": None
        },
        {
            "name": "Instagram –ü—Ä–æ—Ñ–∏–ª—å 1",
            "group": groups[0].id,
            "os": "windows",
            "proxy": None
        },
        {
            "name": "eBay –ü—Ä–æ—Ñ–∏–ª—å 1",
            "group": groups[1].id,
            "os": "macos",
            "proxy": {
                "type": "http",
                "server": "proxy3.example.com:3128"
            }
        }
    ]
    
    created_profiles = []
    for profile_data in profiles_data:
        profile = await manager.create_profile(
            name=profile_data["name"],
            group=profile_data["group"],
            browser_settings={"os": profile_data["os"]},
            proxy_config=profile_data["proxy"]
        )
        created_profiles.append(profile)
        print(f"   üë§ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile.name}")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π\n")
    
    print("3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º:")
    all_groups = await storage.list_profile_groups()
    for group in all_groups:
        print(f"   üìä {group.name}: {group.profile_count} –ø—Ä–æ—Ñ–∏–ª–µ–π")
    print()
    
    print("4Ô∏è‚É£ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ
    social_profiles = await manager.list_profiles(filters={"group": groups[0].id})
    print(f"   üì± –ü—Ä–æ—Ñ–∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π: {len(social_profiles)}")
    for profile in social_profiles:
        print(f"      - {profile.name}")
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    active_profiles = await manager.list_profiles(filters={"status": "active"})
    print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {len(active_profiles)}")
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    facebook_profiles = await manager.list_profiles(filters={"name_like": "Facebook"})
    print(f"   üîç –ü—Ä–æ—Ñ–∏–ª–∏ —Å 'Facebook' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: {len(facebook_profiles)}")
    print()
    
    print("5Ô∏è‚É£ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏...")
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    test_profile = created_profiles[0]
    await manager.update_profile(test_profile.id, {
        "notes": "–û–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –¥–µ–º–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "status": "inactive"
    })
    print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {test_profile.name}")
    
    # –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    cloned_profile = await manager.clone_profile(
        test_profile.id,
        "–ö–ª–æ–Ω Facebook –ü—Ä–æ—Ñ–∏–ª—è",
        regenerate_fingerprint=True
    )
    print(f"   üìã –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {cloned_profile.name}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª—è
    export_data = await manager.export_profile(test_profile.id)
    print(f"   üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {len(export_data)} –±–∞–π—Ç")
    print()
    
    print("6Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    profile_stats = await storage.get_profile_usage_stats(test_profile.id)
    print(f"   üìà –ó–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {test_profile.name}: {len(profile_stats)}")
    
    for stat in profile_stats[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
        print(f"      {stat.timestamp.strftime('%H:%M:%S')} - {stat.action}")
    print()
    
    print("7Ô∏è‚É£ –ü–∞–≥–∏–Ω–∞—Ü–∏—è...")
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
    page1 = await manager.list_profiles(limit=3, offset=0)
    page2 = await manager.list_profiles(limit=3, offset=3)
    
    print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 (3 –ø—Ä–æ—Ñ–∏–ª—è): {[p.name for p in page1]}")
    print(f"   üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 (3 –ø—Ä–æ—Ñ–∏–ª—è): {[p.name for p in page2]}")
    
    total_count = await storage.count_profiles()
    print(f"   üìä –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –ë–î: {total_count}")
    print()
    
    print("8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏–∑ –ë–î...")
    await demo_browser_with_db_profile(created_profiles[2])  # Research Bot
    
    print("9Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
    for profile in created_profiles + [cloned_profile]:
        await manager.delete_profile(profile.id)
        print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile.name}")
    
    # –û—á–∏—â–∞–µ–º –≥—Ä—É–ø–ø—ã
    for group in groups:
        await storage.db.delete_profile_group(group.id)
        print(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group.name}")
    
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await storage.close()
    print("\nüéâ === –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ===")


async def demo_browser_with_db_profile(profile: Profile):
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"   üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {profile.name}")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç Camoufox
        camoufox_options = profile.to_camoufox_launch_options()
        camoufox_options["geoip"] = False
        camoufox_options["headless"] = True  # Headless –¥–ª—è –¥–µ–º–æ
        camoufox_options["humanize"] = True
        
        async with AsyncCamoufox(**camoufox_options) as browser:
            page = await browser.new_page()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∞–π—Ç
            await page.goto("https://httpbin.org/user-agent")
            
            # –ü–æ–ª—É—á–∞–µ–º User-Agent
            content = await page.content()
            if "Mozilla" in content:
                print(f"   ‚úÖ –ë—Ä–∞—É–∑–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, User-Agent —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º localStorage
            await page.evaluate("""
                localStorage.setItem('db_profile_test', JSON.stringify({
                    profileId: '%s',
                    dbTest: true,
                    timestamp: new Date().toISOString()
                }));
            """ % profile.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            stored_data = await page.evaluate("localStorage.getItem('db_profile_test')")
            if stored_data:
                print(f"   üíæ localStorage —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            print(f"   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {profile.name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")


async def demo_performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüöÄ === –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î ===\n")
    
    storage = StorageManager("demo_data/performance_test.db")
    await storage.initialize()
    
    manager = ProfileManager(storage, "demo_data")
    await manager.initialize()
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
    group = ProfileGroup(name="Performance Test", description="–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞")
    await storage.save_profile_group(group)
    
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ 50 –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    start_time = time.time()
    
    profiles = []
    for i in range(50):
        profile = await manager.create_profile(
            name=f"Test Profile {i+1}",
            group=group.id,
            browser_settings={"os": ["windows", "macos", "linux"][i % 3]}
        )
        profiles.append(profile)
        
        if (i + 1) % 10 == 0:
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {i+1} –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    create_time = time.time() - start_time
    print(f"‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è 50 –ø—Ä–æ—Ñ–∏–ª–µ–π: {create_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    print("\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞...")
    start_time = time.time()
    
    # –ü–æ–∏—Å–∫ –ø–æ –≥—Ä—É–ø–ø–µ
    group_profiles = await manager.list_profiles(filters={"group": group.id})
    
    # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    active_profiles = await manager.list_profiles(filters={"status": "active"})
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    test_profiles = await manager.list_profiles(filters={"name_like": "Test"})
    
    search_time = time.time() - start_time
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {search_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ: –≥—Ä—É–ø–ø–∞={len(group_profiles)}, –∞–∫—Ç–∏–≤–Ω—ã–µ={len(active_profiles)}, —Ç–µ—Å—Ç={len(test_profiles)}")
    
    # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    print("\nüîÑ –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    start_time = time.time()
    
    # –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    profile_ids = [p.id for p in profiles[:20]]
    await manager.bulk_update_profiles(profile_ids, {"notes": "–ú–∞—Å—Å–æ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω"})
    
    # –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    for profile in profiles:
        await manager.delete_profile(profile.id)
    
    bulk_time = time.time() - start_time
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {bulk_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –û—á–∏—Å—Ç–∫–∞
    await storage.db.delete_profile_group(group.id)
    await storage.close()
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
    db_path = Path("demo_data/performance_test.db")
    if db_path.exists():
        db_path.unlink()
    
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ë–î
        await demo_database_operations()
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await demo_performance_test()
        
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
        print("   ‚úÖ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite")
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π") 
        print("   ‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
        print("   ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π")
        print("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        print("   ‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("   ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ë–î")
        print("   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (50 –ø—Ä–æ—Ñ–∏–ª–µ–π)")
        print("   ‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏")
        
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —ç—Ç–∞–ø—ã:")
        print("   üåê REST API –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("   üé® –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞") 
        print("   üîí –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print("   üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        print("   üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main()) 