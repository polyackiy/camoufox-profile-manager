"""
API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏
"""

import uuid
from typing import Optional, List
from fastapi import APIRouter, HTTPException, Query, Depends, status
from loguru import logger

from api.models.profiles import *
from api.models.system import ApiResponse, ErrorResponse
from core.models import ProfileStatus
from api.dependencies import get_profile_manager


router = APIRouter()


@router.get(
    "/profiles",
    response_model=ProfileListResponse,
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π",
    description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"
)
async def list_profiles(
    page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
    per_page: int = Query(10, ge=1, le=100, description="–ü—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"),
    status: Optional[ProfileStatus] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"),
    group: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ"),
    search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    try:
        profile_manager = get_profile_manager()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters = {}
        if status:
            filters['status'] = status
        if group:
            filters['group'] = group
        if search:
            filters['name_contains'] = search
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = await profile_manager.list_profiles(filters=filters)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        total = len(profiles)
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        paginated_profiles = profiles[start_idx:end_idx]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ API –º–æ–¥–µ–ª–∏
        profile_responses = []
        for profile in paginated_profiles:
            profile_responses.append(ProfileResponse(
                id=profile.id,
                name=profile.name,
                group=profile.group,
                status=profile.status,
                browser_settings=profile.browser_settings.dict() if profile.browser_settings else {},
                proxy_config=profile.proxy.dict() if profile.proxy else None,
                storage_path=profile.storage_path,
                notes=profile.notes,
                auto_rotate_fingerprint=profile.auto_rotate_fingerprint,
                rotate_interval_hours=profile.rotate_interval_hours,
                max_sessions_per_day=profile.max_sessions_per_day,
                created_at=profile.created_at,
                updated_at=profile.updated_at,
                last_used=profile.last_used
            ))
        
        return ProfileListResponse(
            profiles=profile_responses,
            total=total,
            page=page,
            per_page=per_page,
            has_next=end_idx < total,
            has_prev=page > 1
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post(
    "/profiles",
    response_model=ProfileResponse,
    status_code=status.HTTP_201_CREATED,
    summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
    description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–ø–µ—á–∞—Ç–∫–∞"
)
async def create_profile(request: ProfileCreateRequest):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        profile_manager = get_profile_manager()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        profile = await profile_manager.create_profile(
            name=request.name,
            group=request.group,
            browser_settings=request.browser_settings,
            proxy_config=request.proxy_config,
            generate_fingerprint=request.generate_fingerprint
        )
        
        logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile.name} (ID: {profile.id})")
        
        return ProfileResponse(
            id=profile.id,
            name=profile.name,
            group=profile.group,
            status=profile.status,
            browser_settings=profile.browser_settings.dict() if profile.browser_settings else {},
            proxy_config=profile.proxy.dict() if profile.proxy else None,
            storage_path=profile.storage_path,
            notes=profile.notes,
            auto_rotate_fingerprint=profile.auto_rotate_fingerprint,
            rotate_interval_hours=profile.rotate_interval_hours,
            max_sessions_per_day=profile.max_sessions_per_day,
            created_at=profile.created_at,
            updated_at=profile.updated_at,
            last_used=profile.last_used
        )
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/profiles/{profile_id}",
    response_model=ProfileResponse,
    summary="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID",
    description="–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ"
)
async def get_profile(profile_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID"""
    try:
        profile_manager = get_profile_manager()
        profile = await profile_manager.get_profile(profile_id)
        
        if not profile:
            raise HTTPException(
                status_code=404,
                detail=f"–ü—Ä–æ—Ñ–∏–ª—å —Å ID {profile_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return ProfileResponse(
            id=profile.id,
            name=profile.name,
            group=profile.group,
            status=profile.status,
            browser_settings=profile.browser_settings.dict() if profile.browser_settings else {},
            proxy_config=profile.proxy.dict() if profile.proxy else None,
            storage_path=profile.storage_path,
            notes=profile.notes,
            auto_rotate_fingerprint=profile.auto_rotate_fingerprint,
            rotate_interval_hours=profile.rotate_interval_hours,
            max_sessions_per_day=profile.max_sessions_per_day,
            created_at=profile.created_at,
            updated_at=profile.updated_at,
            last_used=profile.last_used
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.put(
    "/profiles/{profile_id}",
    response_model=ProfileResponse,
    summary="–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
    description="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"
)
async def update_profile(profile_id: str, request: ProfileUpdateRequest):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        profile_manager = get_profile_manager()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        updates = {}
        if request.name is not None:
            updates['name'] = request.name
        if request.group is not None:
            updates['group'] = request.group
        if request.status is not None:
            updates['status'] = request.status
        if request.browser_settings is not None:
            updates['browser_settings'] = request.browser_settings
        if request.proxy_config is not None:
            updates['proxy_config'] = request.proxy_config
        if request.notes is not None:
            updates['notes'] = request.notes
        if request.auto_rotate_fingerprint is not None:
            updates['auto_rotate_fingerprint'] = request.auto_rotate_fingerprint
        if request.rotate_interval_hours is not None:
            updates['rotate_interval_hours'] = request.rotate_interval_hours
        if request.max_sessions_per_day is not None:
            updates['max_sessions_per_day'] = request.max_sessions_per_day
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        profile = await profile_manager.update_profile(profile_id, updates)
        
        if not profile:
            raise HTTPException(
                status_code=404,
                detail=f"–ü—Ä–æ—Ñ–∏–ª—å —Å ID {profile_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile.name} (ID: {profile_id})")
        
        return ProfileResponse(
            id=profile.id,
            name=profile.name,
            group=profile.group,
            status=profile.status,
            browser_settings=profile.browser_settings.dict() if profile.browser_settings else {},
            proxy_config=profile.proxy.dict() if profile.proxy else None,
            storage_path=profile.storage_path,
            notes=profile.notes,
            auto_rotate_fingerprint=profile.auto_rotate_fingerprint,
            rotate_interval_hours=profile.rotate_interval_hours,
            max_sessions_per_day=profile.max_sessions_per_day,
            created_at=profile.created_at,
            updated_at=profile.updated_at,
            last_used=profile.last_used
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.delete(
    "/profiles/{profile_id}",
    response_model=ApiResponse,
    summary="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
    description="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
)
async def delete_profile(profile_id: str):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        profile_manager = get_profile_manager()
        success = await profile_manager.delete_profile(profile_id)
        
        if not success:
            raise HTTPException(
                status_code=404,
                detail=f"–ü—Ä–æ—Ñ–∏–ª—å —Å ID {profile_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        logger.warning(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: ID {profile_id}")
        
        return ApiResponse(
            success=True,
            message=f"–ü—Ä–æ—Ñ–∏–ª—å {profile_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post(
    "/profiles/{profile_id}/launch",
    response_model=ProfileLaunchResponse,
    summary="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ—Ñ–∏–ª–µ–º",
    description="–ó–∞–ø—É—Å—Ç–∏—Ç—å Camoufox —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è"
)
async def launch_profile(profile_id: str, request: ProfileLaunchRequest):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å –ø—Ä–æ—Ñ–∏–ª–µ–º"""
    try:
        profile_manager = get_profile_manager()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        browser_session = await profile_manager.launch_browser(
            profile_id, 
            headless=request.headless,
            window_size=request.window_size,
            **request.additional_options or {}
        )
        
        logger.success(f"üöÄ –ó–∞–ø—É—â–µ–Ω –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_id}")
        
        return ProfileLaunchResponse(
            profile_id=profile_id,
            browser_session_id=str(uuid.uuid4()),  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è ID —Å–µ—Å—Å–∏–∏
            status="launched",
            message="–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω",
            camoufox_options=browser_session
        )
        
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è {profile_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post(
    "/profiles/{profile_id}/clone",
    response_model=ProfileResponse,
    status_code=status.HTTP_201_CREATED,
    summary="–ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
    description="–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é –ø—Ä–æ—Ñ–∏–ª—è —Å –Ω–æ–≤—ã–º –æ—Ç–ø–µ—á–∞—Ç–∫–æ–º"
)
async def clone_profile(profile_id: str, request: ProfileCloneRequest):
    """–ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        profile_manager = get_profile_manager()
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        cloned_profile = await profile_manager.clone_profile(
            profile_id,
            request.new_name,
            regenerate_fingerprint=request.regenerate_fingerprint
        )
        
        logger.success(f"üîÑ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile_id} ‚Üí {cloned_profile.id}")
        
        return ProfileResponse(
            id=cloned_profile.id,
            name=cloned_profile.name,
            group=cloned_profile.group,
            status=cloned_profile.status,
            browser_settings=cloned_profile.browser_settings.dict() if cloned_profile.browser_settings else {},
            proxy_config=cloned_profile.proxy.dict() if cloned_profile.proxy else None,
            storage_path=cloned_profile.storage_path,
            notes=cloned_profile.notes,
            auto_rotate_fingerprint=cloned_profile.auto_rotate_fingerprint,
            rotate_interval_hours=cloned_profile.rotate_interval_hours,
            max_sessions_per_day=cloned_profile.max_sessions_per_day,
            created_at=cloned_profile.created_at,
            updated_at=cloned_profile.updated_at,
            last_used=cloned_profile.last_used
        )
        
    except ValueError as e:
        raise HTTPException(status_code=404, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è {profile_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/profiles/{profile_id}/stats",
    response_model=ProfileStatsResponse,
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è",
    description="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
)
async def get_profile_stats(profile_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        profile_manager = get_profile_manager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile = await profile_manager.get_profile(profile_id)
        if not profile:
            raise HTTPException(
                status_code=404,
                detail=f"–ü—Ä–æ—Ñ–∏–ª—å —Å ID {profile_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await profile_manager.get_profile_stats(profile_id)
        
        return ProfileStatsResponse(
            profile_id=profile_id,
            total_sessions=stats.get('total_sessions', 0),
            total_duration_minutes=stats.get('total_duration_minutes', 0),
            last_session=stats.get('last_session'),
            success_rate=stats.get('success_rate', 0.0),
            actions=stats.get('actions', [])
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è {profile_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e)) 