"""
API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π
"""

from typing import Optional
from fastapi import APIRouter, HTTPException, status
from loguru import logger

from api.models.groups import *
from api.models.system import ApiResponse
from api.dependencies import get_profile_manager


router = APIRouter()


@router.get(
    "/groups",
    response_model=GroupListResponse,
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø",
    description="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ø—Ä–æ—Ñ–∏–ª–µ–π"
)
async def list_groups():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
    try:
        profile_manager = get_profile_manager()
        groups_data = await profile_manager.list_groups()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ API –º–æ–¥–µ–ª–∏
        groups = []
        for group_data in groups_data:
            groups.append(GroupResponse(
                id=group_data['id'],
                name=group_data['name'],
                description=group_data.get('description'),
                profile_count=group_data.get('profile_count', 0),
                created_at=group_data['created_at']
            ))
        
        return GroupListResponse(
            groups=groups,
            total=len(groups)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post(
    "/groups",
    response_model=GroupResponse,
    status_code=status.HTTP_201_CREATED,
    summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É",
    description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ñ–∏–ª–µ–π"
)
async def create_group(request: GroupCreateRequest):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
    try:
        profile_manager = get_profile_manager()
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
        group_data = await profile_manager.create_group(
            name=request.name,
            description=request.description
        )
        
        logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {request.name}")
        
        return GroupResponse(
            id=group_data['id'],
            name=group_data['name'],
            description=group_data.get('description'),
            profile_count=0,
            created_at=group_data['created_at']
        )
        
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/groups/{group_id}",
    response_model=GroupResponse,
    summary="–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ ID",
    description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ"
)
async def get_group(group_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—É –ø–æ ID"""
    try:
        profile_manager = get_profile_manager()
        group_data = await profile_manager.get_group(group_id)
        
        if not group_data:
            raise HTTPException(
                status_code=404,
                detail=f"–ì—Ä—É–ø–ø–∞ —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        return GroupResponse(
            id=group_data['id'],
            name=group_data['name'],
            description=group_data.get('description'),
            profile_count=group_data.get('profile_count', 0),
            created_at=group_data['created_at']
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.put(
    "/groups/{group_id}",
    response_model=GroupResponse,
    summary="–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É",
    description="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã"
)
async def update_group(group_id: str, request: GroupUpdateRequest):
    """–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"""
    try:
        profile_manager = get_profile_manager()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        updates = {}
        if request.name is not None:
            updates['name'] = request.name
        if request.description is not None:
            updates['description'] = request.description
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É
        group_data = await profile_manager.update_group(group_id, updates)
        
        if not group_data:
            raise HTTPException(
                status_code=404,
                detail=f"–ì—Ä—É–ø–ø–∞ —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_data['name']} (ID: {group_id})")
        
        return GroupResponse(
            id=group_data['id'],
            name=group_data['name'],
            description=group_data.get('description'),
            profile_count=group_data.get('profile_count', 0),
            created_at=group_data['created_at']
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.delete(
    "/groups/{group_id}",
    response_model=ApiResponse,
    summary="–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É",
    description="–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É (–ø—Ä–æ—Ñ–∏–ª–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –±–µ–∑ –≥—Ä—É–ø–ø—ã)"
)
async def delete_group(group_id: str):
    """–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É"""
    try:
        profile_manager = get_profile_manager()
        success = await profile_manager.delete_group(group_id)
        
        if not success:
            raise HTTPException(
                status_code=404,
                detail=f"–ì—Ä—É–ø–ø–∞ —Å ID {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        logger.warning(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: ID {group_id}")
        
        return ApiResponse(
            success=True,
            message=f"–ì—Ä—É–ø–ø–∞ {group_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        raise HTTPException(status_code=500, detail=str(e)) 