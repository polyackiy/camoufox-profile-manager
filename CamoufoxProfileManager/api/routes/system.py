"""
API —Ä–æ—É—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import time
import psutil
import os
from datetime import datetime
from fastapi import APIRouter, HTTPException
from loguru import logger

from api.models.system import SystemStatusResponse, ApiResponse, ProfileDiagnosticResponse, ProfileCleanupResponse
from api.dependencies import get_profile_manager
from cleanup_profiles import ProfileCleanupManager


router = APIRouter()

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startup_time = time.time()


@router.get(
    "/system/status",
    response_model=SystemStatusResponse,
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
    description="–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"
)
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        profile_manager = get_profile_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
        profiles = await profile_manager.list_profiles()
        active_profiles = len([p for p in profiles if p.status == "active"])
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
        active_browsers = await profile_manager.get_active_browsers()
        running_browsers = len(active_browsers.get("active_browsers", []))
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã
        groups = await profile_manager.list_groups()
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        memory_usage = psutil.virtual_memory().percent
        disk_usage = psutil.disk_usage('/').percent
        
        return SystemStatusResponse(
            total_profiles=len(profiles),
            active_profiles=active_profiles,
            running_browsers=running_browsers,
            total_groups=len(groups),
            system_load=0.0,  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
            memory_usage=memory_usage,
            disk_usage=disk_usage,
            uptime_seconds=0  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/system/profiles/diagnostic",
    response_model=ProfileDiagnosticResponse,
    summary="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π",
    description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã"
)
async def diagnostic_profiles():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    try:
        cleanup_manager = ProfileCleanupManager()
        await cleanup_manager.initialize()
        
        try:
            diagnostic_result = await cleanup_manager.full_diagnostic()
            
            return ProfileDiagnosticResponse(
                total_profiles_in_db=diagnostic_result['total_profiles_in_db'],
                total_directories_on_disk=diagnostic_result['total_directories_on_disk'],
                total_disk_size_mb=diagnostic_result['total_disk_size_mb'],
                orphaned_directories=diagnostic_result['orphaned_directories'],
                orphaned_size_mb=diagnostic_result['orphaned_size_mb'],
                missing_directories=diagnostic_result['missing_directories'],
                healthy_profiles=diagnostic_result['healthy_profiles'],
                issues_found=diagnostic_result['issues_found']
            )
            
        finally:
            await cleanup_manager.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post(
    "/system/profiles/cleanup",
    response_model=ProfileCleanupResponse,
    summary="–û—á–∏—Å—Ç–∫–∞ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π",
    description="–£–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
)
async def cleanup_orphaned_profiles(dry_run: bool = False):
    """–û—á–∏—Å—Ç–∫–∞ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    try:
        cleanup_manager = ProfileCleanupManager()
        await cleanup_manager.initialize()
        
        try:
            if dry_run:
                # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
                orphaned = await cleanup_manager.find_orphaned_profile_directories()
                missing = await cleanup_manager.find_missing_profile_directories()
                
                return ProfileCleanupResponse(
                    orphaned_removed=len(orphaned),
                    directories_created=len(missing),
                    freed_space_mb=sum(item['size_mb'] for item in orphaned),
                    dry_run=True,
                    message=f"Dry-run: –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {len(orphaned)} –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, —Å–æ–∑–¥–∞–Ω–æ {len(missing)}"
                )
            else:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
                results = await cleanup_manager.auto_cleanup(dry_run=False)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
                freed_space = 0
                if results['orphaned_removed'] > 0:
                    # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª—ã —É–∂–µ —É–¥–∞–ª–µ–Ω—ã
                    freed_space = results['orphaned_removed'] * 30  # ~30MB –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å—Ä–µ–¥–Ω–µ–º
                
                return ProfileCleanupResponse(
                    orphaned_removed=results['orphaned_removed'],
                    directories_created=results['directories_created'],
                    freed_space_mb=freed_space,
                    dry_run=False,
                    message=f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {results['orphaned_removed']}, —Å–æ–∑–¥–∞–Ω–æ {results['directories_created']}"
                )
                
        finally:
            await cleanup_manager.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post(
    "/system/cleanup",
    response_model=ApiResponse,
    summary="–û–±—â–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
    description="–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ"
)
async def cleanup_system():
    """–û–±—â–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        profile_manager = get_profile_manager()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
        cleanup_manager = ProfileCleanupManager()
        await cleanup_manager.initialize()
        
        try:
            cleanup_results = await cleanup_manager.auto_cleanup(dry_run=False)
            
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã –æ—á–∏—Å—Ç–∫–∏:
            # - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
            # - –°–∂–∞—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            # - –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞
            
            total_cleaned = cleanup_results['orphaned_removed']
            freed_space = total_cleaned * 30  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            
            logger.info(f"üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã: —É–¥–∞–ª–µ–Ω–æ {total_cleaned} —Ñ–∞–π–ª–æ–≤")
            
            return ApiResponse(
                success=True,
                message="–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                data={
                    "cleaned_files": total_cleaned,
                    "freed_space_mb": freed_space,
                    "orphaned_profiles_removed": cleanup_results['orphaned_removed'],
                    "directories_created": cleanup_results['directories_created']
                }
            )
            
        finally:
            await cleanup_manager.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/system/logs",
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏",
    description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"
)
async def get_system_logs(lines: int = 100):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏"""
    try:
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        return {
            "logs": [],
            "total_lines": 0,
            "message": "–§—É–Ω–∫—Ü–∏—è –ª–æ–≥–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ"
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post(
    "/system/restart",
    response_model=ApiResponse,
    summary="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã",
    description="–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏"
)
async def restart_system():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        profile_manager = get_profile_manager()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
        await profile_manager.close_all_browsers()
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        logger.info("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")
        
        return ApiResponse(
            success=True,
            message="–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞",
            data={"restart_scheduled": True}
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/system/info",
    response_model=ApiResponse,
    summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ",
    description="–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API"
)
async def get_system_info():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        return ApiResponse(
            success=True,
            message="CamoufoxProfileManager API",
            data={
                "name": "CamoufoxProfileManager",
                "version": "1.0.0",
                "description": "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –±—Ä–∞—É–∑–µ—Ä–∞",
                "author": "AI Assistant",
                "uptime_seconds": int(time.time() - startup_time)
            }
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e)) 