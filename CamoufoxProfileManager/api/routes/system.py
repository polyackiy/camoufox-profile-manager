"""
API —Ä–æ—É—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import time
import psutil
import os
from datetime import datetime
from fastapi import APIRouter, HTTPException
from loguru import logger

from api.models.system import SystemStatusResponse, ApiResponse
from api.dependencies import get_profile_manager, get_storage_manager


router = APIRouter()

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startup_time = time.time()


@router.get(
    "/system/status",
    response_model=SystemStatusResponse,
    summary="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã",
    description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"
)
async def get_system_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        profile_manager = get_profile_manager()
        storage_manager = get_storage_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π
        profiles = await profile_manager.list_profiles()
        active_profiles = [p for p in profiles if p.status == 'active']
        inactive_profiles = [p for p in profiles if p.status == 'inactive']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path = "demo_data/profiles.db"
        db_size_bytes = os.path.getsize(db_path) if os.path.exists(db_path) else 0
        db_size_mb = round(db_size_bytes / 1024 / 1024, 2)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        process = psutil.Process()
        memory_info = process.memory_info()
        
        return SystemStatusResponse(
            status="healthy",
            version="1.0.0",
            uptime_seconds=int(time.time() - startup_time),
            database={
                "status": "connected",
                "size_mb": db_size_mb,
                "tables": 3  # profiles, profile_groups, usage_stats
            },
            profiles={
                "total": len(profiles),
                "active": len(active_profiles),
                "inactive": len(inactive_profiles)
            },
            memory_usage={
                "rss_mb": round(memory_info.rss / 1024 / 1024, 2),
                "vms_mb": round(memory_info.vms / 1024 / 1024, 2)
            },
            timestamp=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get(
    "/system/info",
    response_model=ApiResponse,
    summary="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ",
    description="–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API"
)
async def get_system_info():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        return ApiResponse(
            success=True,
            message="CamoufoxProfileManager API",
            data={
                "name": "CamoufoxProfileManager",
                "version": "1.0.0",
                "description": "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –±—Ä–∞—É–∑–µ—Ä–∞",
                "author": "AI Assistant",
                "uptime_seconds": int(time.time() - startup_time)
            }
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post(
    "/system/cleanup",
    response_model=ApiResponse,
    summary="–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
    description="–û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ"
)
async def cleanup_system():
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É"""
    try:
        profile_manager = get_profile_manager()
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏
        # - –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        # - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
        # - –°–∂–∞—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        logger.info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        return ApiResponse(
            success=True,
            message="–û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            data={
                "cleaned_files": 0,
                "freed_space_mb": 0
            }
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e)) 