"""
WebSocket —Ä–æ—É—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import json
import asyncio
from datetime import datetime
from typing import Dict, Set
from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from loguru import logger

from api.models.system import WebSocketMessage
from api.dependencies import get_profile_manager


router = APIRouter()

# –ê–∫—Ç–∏–≤–Ω—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
active_connections: Set[WebSocket] = set()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
subscriptions: Dict[WebSocket, Set[str]] = {}


class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self):
        self.active_connections: Set[WebSocket] = set()
        self.subscriptions: Dict[WebSocket, Set[str]] = {}
    
    async def connect(self, websocket: WebSocket):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π WebSocket"""
        await websocket.accept()
        self.active_connections.add(websocket)
        self.subscriptions[websocket] = set()
        logger.info(f"üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    def disconnect(self, websocket: WebSocket):
        """–û—Ç–∫–ª—é—á–∏—Ç—å WebSocket"""
        self.active_connections.discard(websocket)
        self.subscriptions.pop(websocket, None)
        logger.info(f"üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(self.active_connections)}")
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é"""
        try:
            await websocket.send_text(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.disconnect(websocket)
    
    async def broadcast(self, message: WebSocketMessage, event_type: str = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        if not self.active_connections:
            return
            
        message_json = json.dumps({
            "type": message.type,
            "timestamp": message.timestamp.isoformat(),
            "data": message.data
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–±—ã—Ç–∏–π
        disconnected = set()
        for websocket in self.active_connections:
            try:
                # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                if event_type and self.subscriptions.get(websocket):
                    if event_type not in self.subscriptions[websocket]:
                        continue
                
                await websocket.send_text(message_json)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                disconnected.add(websocket)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for websocket in disconnected:
            self.disconnect(websocket)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
manager = ConnectionManager()


@router.websocket("/monitor")
async def websocket_monitor(websocket: WebSocket):
    """WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    await manager.connect(websocket)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_message = WebSocketMessage(
            type="connected",
            timestamp=datetime.now(),
            data={
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                "available_events": [
                    "profile_created",
                    "profile_updated", 
                    "profile_deleted",
                    "profile_launched",
                    "browser_closed",
                    "system_status"
                ]
            }
        )
        
        await manager.send_personal_message(
            json.dumps({
                "type": welcome_message.type,
                "timestamp": welcome_message.timestamp.isoformat(),
                "data": welcome_message.data
            }),
            websocket
        )
        
        # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        while True:
            try:
                data = await websocket.receive_text()
                message_data = json.loads(data)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                if message_data.get("type") == "subscribe":
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
                    events = message_data.get("events", [])
                    manager.subscriptions[websocket].update(events)
                    
                    response = WebSocketMessage(
                        type="subscription_updated",
                        timestamp=datetime.now(),
                        data={
                            "subscribed_to": list(manager.subscriptions[websocket])
                        }
                    )
                    
                    await manager.send_personal_message(
                        json.dumps({
                            "type": response.type,
                            "timestamp": response.timestamp.isoformat(),
                            "data": response.data
                        }),
                        websocket
                    )
                
                elif message_data.get("type") == "ping":
                    # Ping-pong –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    response = WebSocketMessage(
                        type="pong",
                        timestamp=datetime.now(),
                        data={"message": "pong"}
                    )
                    
                    await manager.send_personal_message(
                        json.dumps({
                            "type": response.type,
                            "timestamp": response.timestamp.isoformat(),
                            "data": response.data
                        }),
                        websocket
                    )
                    
            except WebSocketDisconnect:
                break
            except json.JSONDecodeError:
                # –ù–µ–≤–µ—Ä–Ω—ã–π JSON
                error_message = WebSocketMessage(
                    type="error",
                    timestamp=datetime.now(),
                    data={"error": "Invalid JSON format"}
                )
                
                await manager.send_personal_message(
                    json.dumps({
                        "type": error_message.type,
                        "timestamp": error_message.timestamp.isoformat(),
                        "data": error_message.data
                    }),
                    websocket
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ WebSocket: {e}")
                break
                
    except WebSocketDisconnect:
        pass
    finally:
        manager.disconnect(websocket)


async def broadcast_event(event_type: str, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    if not manager.active_connections:
        return
    
    message = WebSocketMessage(
        type=event_type,
        timestamp=datetime.now(),
        data=data
    )
    
    await manager.broadcast(message, event_type)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π

async def notify_profile_created(profile_id: str, profile_name: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    await broadcast_event("profile_created", {
        "profile_id": profile_id,
        "name": profile_name,
        "message": f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}"
    })


async def notify_profile_updated(profile_id: str, profile_name: str, changes: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    await broadcast_event("profile_updated", {
        "profile_id": profile_id,
        "name": profile_name,
        "changes": changes,
        "message": f"–û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}"
    })


async def notify_profile_deleted(profile_id: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    await broadcast_event("profile_deleted", {
        "profile_id": profile_id,
        "message": f"–£–¥–∞–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile_id}"
    })


async def notify_browser_launched(profile_id: str, profile_name: str):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ –∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
    await broadcast_event("profile_launched", {
        "profile_id": profile_id,
        "name": profile_name,
        "message": f"–ó–∞–ø—É—â–µ–Ω –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_name}"
    })


async def notify_system_status(status_data: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏—Å—Ç–µ–º—ã"""
    await broadcast_event("system_status", status_data) 