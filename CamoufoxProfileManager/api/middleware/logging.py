"""
Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import time
from typing import Callable
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from loguru import logger


class LoggingMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        # –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        start_time = time.time()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        logger.info(
            f"üåê {request.method} {request.url.path} "
            f"from {request.client.host if request.client else 'unknown'}"
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        try:
            response = await call_next(request)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
            logger.info(
                f"{status_emoji} {request.method} {request.url.path} "
                f"‚Üí {response.status_code} ({process_time:.3f}s)"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            response.headers["X-Process-Time"] = str(process_time)
            
            return response
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            process_time = time.time() - start_time
            logger.error(
                f"üí• {request.method} {request.url.path} "
                f"ERROR: {str(e)} ({process_time:.3f}s)"
            )
            raise 