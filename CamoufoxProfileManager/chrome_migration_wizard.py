"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome –≤ Camoufox
"""

import asyncio
import sys
from pathlib import Path
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from core.database import StorageManager
from core.profile_manager import ProfileManager
from core.chrome_migration_manager import ChromeMigrationManager


async def run_chrome_migration_wizard():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ Chrome –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    storage = StorageManager()
    await storage.initialize()
    
    profile_manager = ProfileManager(storage)
    await profile_manager.initialize()
    
    migration_manager = ChromeMigrationManager(profile_manager)
    
    try:
        # 1. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome
        logger.info("üìã –®–∞–≥ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome")
        chrome_profiles = await migration_manager.discover_chrome_profiles()
        
        if not chrome_profiles:
            logger.warning("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Chrome —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ —Å –¥–∞–Ω–Ω—ã–º–∏")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞
            paths = migration_manager.chrome_importer.chrome_data_paths
            logger.info(f"üîç –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –≤: {paths}")
            return
        
        logger.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chrome_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome:")
        for i, profile in enumerate(chrome_profiles, 1):
            logger.info(f"  {i}. {profile['display_name']} ({profile['name']})")
            logger.info(f"     –ü—É—Ç—å: {profile['path']}")
            logger.info(f"     –ö—É–∫–∏: {'‚úì' if profile['has_cookies'] else '‚úó'}")
            logger.info(f"     –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {profile['suggested_mapping']['type']}")
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –º–∞–ø–ø–∏–Ω–≥–∞
        logger.info("\nüìù –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –º–∞–ø–ø–∏–Ω–≥–∞")
        template_path = await migration_manager.generate_mapping_template()
        logger.success(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {template_path}")
        
        # 3. –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
        logger.info("\nüìä –®–∞–≥ 3: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏")
        status = await migration_manager.get_migration_status()
        logger.info(f"Chrome –ø—Ä–æ—Ñ–∏–ª–µ–π: {status['chrome_profiles_found']}")
        logger.info(f"Camoufox –ø—Ä–æ—Ñ–∏–ª–µ–π –≤—Å–µ–≥–æ: {status['camoufox_profiles_total']}")
        logger.info(f"–£–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {status['migrated_profiles']}")
        
        # 4. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏
        logger.info("\nüèÉ –®–∞–≥ 4: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∏–≥—Ä–∞—Ü–∏–∏")
        dry_run_results = await migration_manager.migrate_all_profiles(dry_run=True)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {dry_run_results['chrome_profiles_found']}")
        for result in dry_run_results['migration_results']:
            logger.info(f"  - {result['chrome_display_name']}: {result['suggested_mapping']['type']}")
        
        # 5. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–∏–ª—è
        logger.info("\n‚ùì –®–∞–≥ 5: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è")
        
        if chrome_profiles:
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ Chrome –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for i, profile in enumerate(chrome_profiles, 1):
                status = "‚úì" if profile['has_cookies'] else "‚úó"
                print(f"  {i}. {profile['display_name']} ({profile['name']}) - –ö—É–∫–∏: {status}")
            
            print("  0. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é")
            
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (1-{len(chrome_profiles)}, 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
                choice_num = int(choice)
                
                if choice_num == 0:
                    logger.info("‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                elif 1 <= choice_num <= len(chrome_profiles):
                    selected_profile = chrome_profiles[choice_num - 1]
                    
                    logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è: {selected_profile['display_name']}")
                    logger.info(f"   –ü—É—Ç—å: {selected_profile['path']}")
                    logger.info(f"   –ö—É–∫–∏: {'–ï—Å—Ç—å' if selected_profile['has_cookies'] else '–ù–µ—Ç'}")
                    
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{selected_profile['display_name']}':")
                    
                    # –ò–º—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                    if selected_profile['display_name'] and selected_profile['display_name'] != selected_profile['name']:
                        default_name = f"Chrome - {selected_profile['display_name']} ({selected_profile['name']})"
                    else:
                        default_name = f"Chrome - {selected_profile['name']}"
                    new_name = input(f"–ò–º—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è [{default_name}]: ").strip()
                    if not new_name:
                        new_name = default_name
                    
                    # –ì—Ä—É–ø–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
                    default_group = "chrome_imports"
                    new_group = input(f"–ì—Ä—É–ø–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è [{default_group}]: ").strip()
                    if not new_group:
                        new_group = default_group
                    
                    # –ß—Ç–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å
                    include_cookies = input("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–∫–∏? [Y/n]: ").strip().lower() not in ['n', 'no', '–Ω–µ—Ç']
                    include_bookmarks = input("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏? [Y/n]: ").strip().lower() not in ['n', 'no', '–Ω–µ—Ç']
                    include_history = input("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é? [y/N]: ").strip().lower() in ['y', 'yes', '–¥–∞']
                    
                    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
                    mapping = {
                        "create_new_profile": True,
                        "new_profile_name": new_name,
                        "new_profile_group": new_group,
                        "migration_settings": {
                            "include_cookies": include_cookies,
                            "include_bookmarks": include_bookmarks,
                            "include_history": include_history
                        }
                    }
                    
                    logger.info(f"\nüöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
                    logger.info(f"   –ù–æ–≤–æ–µ –∏–º—è: {new_name}")
                    logger.info(f"   –ì—Ä—É–ø–ø–∞: {new_group}")
                    logger.info(f"   –ö—É–∫–∏: {'‚úì' if include_cookies else '‚úó'}")
                    logger.info(f"   –ó–∞–∫–ª–∞–¥–∫–∏: {'‚úì' if include_bookmarks else '‚úó'}")
                    logger.info(f"   –ò—Å—Ç–æ—Ä–∏—è: {'‚úì' if include_history else '‚úó'}")
                    
                    result = await migration_manager.migrate_profile(selected_profile, mapping)
                    
                    if result["success"]:
                        logger.success(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                        logger.info(f"   –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {result['camoufox_profile_name']} ({result['camoufox_profile_id']})")
                        logger.info(f"   –ö—É–∫–∏: {result['migration_details'].get('cookies_imported', 0)}")
                        logger.info(f"   –ó–∞–∫–ª–∞–¥–∫–∏: {result['migration_details'].get('bookmarks_imported', 0)}")
                        logger.info(f"   –ò—Å—Ç–æ—Ä–∏—è: {result['migration_details'].get('history_imported', 0)}")
                    else:
                        logger.error(f"‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞:")
                        for error in result["errors"]:
                            logger.error(f"   - {error}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è")
                    logger.info("‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                    
            except ValueError:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ.")
                logger.info("‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            except KeyboardInterrupt:
                logger.info("\n‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        logger.info("\nüìä –®–∞–≥ 6: –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å")
        final_status = await migration_manager.get_migration_status()
        logger.info(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {final_status['migrated_profiles']}")
        
        if final_status['migrated_profile_details']:
            logger.info("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
            for profile in final_status['migrated_profile_details']:
                logger.info(f"  - {profile['name']} (ID: {profile['id']}, –ì—Ä—É–ø–ø–∞: {profile['group']})")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
    
    finally:
        logger.info("üèÅ –ú–∞—Å—Ç–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


async def show_excel_integration():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Excel –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    
    logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ Excel –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä Excel —Ñ–∞–π–ª–∞ —Å –º–∞–ø–ø–∏–Ω–≥–æ–º
    try:
        import openpyxl
        from openpyxl import Workbook
        
        wb = Workbook()
        ws = wb.active
        ws.title = "Chrome Migration Mapping"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [
            "Chrome Profile", "Chrome Display Name", "Chrome Path",
            "Action", "Camoufox Profile ID", "New Profile Name", "New Profile Group",
            "Include Cookies", "Include Bookmarks", "Include History", "Notes"
        ]
        
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        example_data = [
            ["Default", "–û—Å–Ω–æ–≤–Ω–æ–π", "/path/to/default", "create_new", "", "Chrome - –û—Å–Ω–æ–≤–Ω–æ–π", "chrome_imports", "TRUE", "TRUE", "FALSE", "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
            ["Profile 1", "–†–∞–±–æ—Ç–∞", "/path/to/profile1", "create_new", "", "Chrome - –†–∞–±–æ—Ç–∞", "work_profiles", "TRUE", "TRUE", "FALSE", "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ñ–∏–ª—å"],
            ["Profile 2", "–õ–∏—á–Ω—ã–π", "/path/to/profile2", "use_existing", "xcj2cs4r", "", "", "TRUE", "FALSE", "FALSE", "–ü–µ—Ä–µ–Ω–æ—Å –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å"],
        ]
        
        for row, data in enumerate(example_data, 2):
            for col, value in enumerate(data, 1):
                ws.cell(row=row, column=col, value=value)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        excel_path = "chrome_migration_example.xlsx"
        wb.save(excel_path)
        
        logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä–Ω—ã–π Excel —Ñ–∞–π–ª: {excel_path}")
        logger.info("üìù –≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏")
        
    except ImportError:
        logger.warning("‚ö†Ô∏è openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ Excel –ø—Ä–∏–º–µ—Ä–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")


def show_chrome_paths():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º Chrome –¥–ª—è —Ç–µ–∫—É—â–µ–π –û–°"""
    from core.chrome_importer import ChromeProfileImporter
    
    importer = ChromeProfileImporter()
    
    logger.info("üóÇÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É—Ç—è—Ö Chrome:")
    logger.info(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {importer.system}")
    logger.info(f"–ü—É—Ç—å –∫ –ø—Ä–æ—Ñ–∏–ª—è–º: {importer.chrome_data_paths['profiles']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
    chrome_path = Path(importer.chrome_data_paths['profiles'])
    if chrome_path.exists():
        logger.success("‚úÖ –ü—É—Ç—å –∫ Chrome –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        try:
            subdirs = [item.name for item in chrome_path.iterdir() if item.is_dir()]
            logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {subdirs}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {e}")
    else:
        logger.warning("‚ö†Ô∏è –ü—É—Ç—å –∫ Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω")
        logger.info("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        logger.info("   - Chrome –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("   - –î–∞–Ω–Ω—ã–µ Chrome –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
        logger.info("   - –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")


async def run_bulk_migration_wizard():
    """–ú–∞—Å—Ç–µ—Ä –º–∞—Å—Å–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –º–∞—Å—Å–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ Chrome –ø—Ä–æ—Ñ–∏–ª–µ–π")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        storage_manager = StorageManager("data/profiles.db")
        await storage_manager.initialize()
        
        profile_manager = ProfileManager(storage_manager, "data")
        await profile_manager.initialize()
        
        migration_manager = ChromeMigrationManager(
            profile_manager=profile_manager,
            config_path="config/chrome_migration_config.yaml"
        )
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
        chrome_profiles = await migration_manager.discover_chrome_profiles()
        
        if not chrome_profiles:
            logger.warning("‚ùå –ü—Ä–æ—Ñ–∏–ª–∏ Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        logger.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chrome_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π Chrome")
        
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ Chrome:")
        for i, profile in enumerate(chrome_profiles, 1):
            status = "‚úì" if profile['has_cookies'] else "‚úó"
            print(f"  {i}. {profile['display_name']} ({profile['name']}) - –ö—É–∫–∏: {status}")
        
        print("\nüìù –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print("   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,5)")
        print("   –ò–ª–∏ 'all' –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
        print("   –ò–ª–∏ '0' –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        
        try:
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if choice == "0":
                logger.info("‚è≠Ô∏è –ú–∞—Å—Å–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            
            selected_profiles = []
            
            if choice.lower() == "all":
                selected_profiles = chrome_profiles
                logger.info(f"üì¶ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ {len(chrome_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
            else:
                # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
                profile_numbers = [int(x.strip()) for x in choice.split(",")]
                for num in profile_numbers:
                    if 1 <= num <= len(chrome_profiles):
                        selected_profiles.append(chrome_profiles[num - 1])
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è: {num}")
                
                if not selected_profiles:
                    logger.warning("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
                    return
                
                logger.info(f"üì¶ –í—ã–±—Ä–∞–Ω–æ {len(selected_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π:")
                for profile in selected_profiles:
                    logger.info(f"   - {profile['display_name']}")
            
            # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
            print(f"\n‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {len(selected_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π:")
            
            default_group = "chrome_bulk_import"
            new_group = input(f"–ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π [{default_group}]: ").strip()
            if not new_group:
                new_group = default_group
            
            include_cookies = input("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É–∫–∏? [Y/n]: ").strip().lower() not in ['n', 'no', '–Ω–µ—Ç']
            include_bookmarks = input("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏? [Y/n]: ").strip().lower() not in ['n', 'no', '–Ω–µ—Ç']
            include_history = input("–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é? [y/N]: ").strip().lower() in ['y', 'yes', '–¥–∞']
            
            logger.info(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é {len(selected_profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π...")
            
            successful_migrations = 0
            failed_migrations = 0
            
            for i, profile in enumerate(selected_profiles, 1):
                logger.info(f"\nüì¶ [{i}/{len(selected_profiles)}] –ú–∏–≥—Ä–∞—Ü–∏—è: {profile['display_name']}")
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è
                if profile['display_name'] and profile['display_name'] != profile['name']:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    unique_name = f"Chrome - {profile['display_name']} ({profile['name']})"
                else:
                    # –ï—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                    unique_name = f"Chrome - {profile['name']}"
                
                mapping = {
                    "create_new_profile": True,
                    "new_profile_name": unique_name,
                    "new_profile_group": new_group,
                    "migration_settings": {
                        "include_cookies": include_cookies,
                        "include_bookmarks": include_bookmarks,
                        "include_history": include_history
                    }
                }
                
                try:
                    result = await migration_manager.migrate_profile(profile, mapping)
                    
                    if result["success"]:
                        successful_migrations += 1
                        logger.success(f"‚úÖ [{i}/{len(selected_profiles)}] {profile['display_name']} - –£—Å–ø–µ—à–Ω–æ!")
                        logger.info(f"   –ü—Ä–æ—Ñ–∏–ª—å: {result['camoufox_profile_name']} ({result['camoufox_profile_id']})")
                    else:
                        failed_migrations += 1
                        logger.error(f"‚ùå [{i}/{len(selected_profiles)}] {profile['display_name']} - –û—à–∏–±–∫–∞!")
                        for error in result["errors"]:
                            logger.error(f"   - {error}")
                
                except Exception as e:
                    failed_migrations += 1
                    logger.error(f"‚ùå [{i}/{len(selected_profiles)}] {profile['display_name']} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            
            # –ò—Ç–æ–≥–∏
            logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Å—Å–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:")
            logger.info(f"   –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(selected_profiles)}")
            logger.success(f"   –£—Å–ø–µ—à–Ω–æ: {successful_migrations}")
            if failed_migrations > 0:
                logger.error(f"   –ù–µ—É–¥–∞—á–Ω–æ: {failed_migrations}")
            else:
                logger.info(f"   –ù–µ—É–¥–∞—á–Ω–æ: {failed_migrations}")
        
        except ValueError as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
        except KeyboardInterrupt:
            logger.info("\n‚è≠Ô∏è –ú–∞—Å—Å–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
    
    finally:
        logger.info("üèÅ –ú–∞—Å—Ç–µ—Ä –º–∞—Å—Å–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü¶ä Camoufox Chrome Migration Wizard")
    logger.info("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç–∏ Chrome
    show_chrome_paths()
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
    print("2. –ú–∞—Å—Å–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
    print("3. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä Excel –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("4. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É—Ç—è—Ö Chrome")
    print("0. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4, 0 –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
    
    if choice == "1":
        asyncio.run(run_chrome_migration_wizard())
    elif choice == "2":
        asyncio.run(run_bulk_migration_wizard())
    elif choice == "3":
        asyncio.run(show_excel_integration())
    elif choice == "4":
        show_chrome_paths()
    elif choice == "0":
        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main() 